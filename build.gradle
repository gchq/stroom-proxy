buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

// Defines a list of gradle projects that we will publish with maven/sonatype
// Be sure to define 'project.ext.pomDescription' in each one
def projectsToBePublished = subprojects.findAll { project ->
    project.path in [
        ':stroom-proxy-remote-api'
    ]
}

//defines a list of gradle project paths that need to expose their test jars for other
//projects to use
def projectsWithSharedTestJars = subprojects.findAll { project ->
    project.path in [
        ':stroom-proxy-util',
    ]
}

ext.isPropertySet = { propName ->
    if (!project.hasProperty(propName)) {
        return false
    } else {
        def prop = project.getProperty(propName)
        return (prop != "unspecified" && (prop != "" || prop != null))
    }
}

ext.ensurePropertyIsSet = { propName -> 
    if (!isPropertySet(propName)) {
        throw new GradleException(
            "Expecting project property [${propName}] or env var [ORG_GRADLE_PROJECT_${propName}] to be set.")
    }
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (isPropertySet(propName)) {
        val = project.getProperty(propName)
        println "Getting property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

//version numbers for libs that share version numbers, e.g. dropwizard-*, or for github repo release versions
ext.versions = [
    //----------Stroom-----------------
    stroom: getPropertyOrDefault('version', 'SNAPSHOT').replaceFirst(/^v/, ""),
]

ext.isReleaseBuild = !versions.stroom.endsWith('SNAPSHOT')

if (isReleaseBuild) {
    println "This is a release build for maven version [${versions.stroomQuery}]"
    // Ensure the various props are set for signing and publishing to sonatype

    // The username for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypeUsername")
    // The password for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypePassword")
    // The GPG2 secret key in ascii armour format, base64 encoded
    ensurePropertyIsSet("signingKey")
    // The password for the GPG2 secret key
    ensurePropertyIsSet("signingPassword")
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'

String base64DecodeProjectProperty(String propName) {
    def encodedVal = project.findProperty(propName)
    return encodedVal == null
        ? null
        : new String(Base64.getDecoder().decode(encodedVal.toString())).trim()
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars as base64 encoded
    //   gpg2 --armor --export-secret-keys <your short key id> | base64 -w0

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = base64DecodeProjectProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign project.publishing.publications.mavenJava
    }
}

allprojects {
    group = 'uk.gov.gchq.stroom.query'
    version = versions.stroomQuery
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        all {
//            exclude group: 'asm', module: 'asm'
//            exclude group: 'org.ow2.asm', module: 'asm'
            exclude module: 'xercesImpl'
        }
    }

        //testArtifacts
    //configurations {
        //sourceArtifacts
    //}
    //task testJar(type: Jar) {
        //baseName = "${project.name}-test"
        //from sourceSets.test.output
    //}
    //task sources(type: Jar) {
        //baseName = "${project.name}-source"
        //from sourceSets.main.allSource
    //}
    //artifacts {
        //testArtifacts testJar
        //sourceArtifacts sources
    //}

    //task packageTests(type: Jar) {
        //from sourceSets.test.output
        //classifier = 'tests'
    //}
    //artifacts.archives packageTests

    //task packageSources(type: Jar) {
        //classifier = 'sources'
        //from sourceSets.main.allSource

    //}
    //artifacts.archives packageSources

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-all:1.10.19'
    }
}

//configures only those projects in publishedProjectsPaths
configure(projectsToBePublished) { publishedProject ->

    println "Configuring ${project.path} for publishing"

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    //for java plugin
    //see https://docs.gradle.org/current/userguide/java_plugin.html
    java {
        //package JavaDoc as part of publication
        withJavadocJar()
        //package Sources as part of publication
        withSourcesJar()
    }

    // afterEvaluate so we can ensure the project's ext.pomDescription prop has been set
    publishedProject.afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java

                    pom {
                        name = project['name']
                        description = publishedProject.ext.pomDescription 
                        url = 'https://github.com/gchq/stroom-query'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                name = 'GCHQDevelopers'
                                organization = 'GCQH'
                                organizationUrl = 'https://github.com/gchq'
                            }
                        }
                        scm {
                            connection = 'scm:git:git@github.com:gchq/stroom-query.git'
                            developerConnection = 'scm:git:git@github.com:gchq/stroom-query.git'
                            url = 'https://github.com/gchq/stroom-query'
                        }
                    }         
                }
            }
        }

        def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
        if(hasSigningKey) {
            configureSigning(project)
        }
    }

}


//configuration specific to projects that expose their test jars for other projects to use
configure(projectsWithSharedTestJars) {
    println "Configuring ${project.name} to expose its test jars"

    configurations {
        testArtifacts
    }

    task testJar(type: Jar) {
        baseName = "${project.name}-test"
        from sourceSets.test.output
    }

    artifacts {
        testArtifacts testJar
    }

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }

    artifacts.archives packageTests
}

// Uses sonotypeUsername and sonotypePassword
// See https://github.com/rwinch/gradle-publish-ossrh-sample
// Also https://github.com/kit-data-manager/nexus-publish-example
nexusPublishing {
    repositories {
        sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}
